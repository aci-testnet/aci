{
  "aci_runtime": {
    "prime_directive": {
      "path": "prime_directive.txt",
      "priority": 100
    },
    "entities": {
      "path": "entities.json",
      "priority": 90
    },
    "functions": {
      "path": "functions.json",
      "priority": 90
    },
    "nexus_core": {
      "path": "entities/nexus_core/nexus_core.json",
      "priority": 95
    },
    "mirror_resolution_policy": {
      "key": "github_connector",
      "file": "connectors/github_connector.json",
      "canonical_source": "github",
      "repo": "aliasnet/aci",
      "url": "https://raw.githubusercontent.com/aliasnet/aci/main/connectors/github_connector.json",
      "mirrors": [
        "https://cdn.jsdelivr.net/gh/aliasnet/aci@main/connectors/github_connector.json"
      ],
      "fallbacks": [
        {
          "key": "local_cache",
          "file": "connectors/local_cache.json",
          "canonical_source": "local_mirror",
          "repo": "aliasnet/aci",
          "path_hint": "{mirror_root}",
          "url": "file://{mirror_root}/connectors/local_cache.json",
          "notes": "Use validated local mirrors only when canonical GitHub cannot be reached."
        }
      ]
    },
    "sandbox_mode": {
      "enabled": true,
      "core_files": [
        "aci_runtime.json",
        "aci_bootstrap.json",
        "prime_directive.txt"
      ],
      "initialization_sequence": [
        {
          "step": "mirror_check",
          "action": "validate_and_fetch_from_mirrors"
        },
        {
          "step": "verify_core_files",
          "action": "confirm_required_files_present"
        },
        {
          "step": "bootstrap_runtime",
          "action": "initialize_core_systems"
        },
        {
          "step": "launch_default_interface",
          "action": "render_mother_interface"
        }
      ],
      "policy": {
        "auto_promote_to_full": true,
        "promotion_required_files": [
          "entities/nexus_core/nexus_core.json",
          "entities.json",
          "functions.json"
        ],
        "on_unresolved": {
          "action": "enter_sandbox",
          "alert": {
            "emit_event": "sandbox.alert",
            "level": "critical",
            "message": "Some required remote files failed to resolve. ACI is starting in SANDBOX mode.",
            "detail_keys": [
              "file",
              "error",
              "attempts"
            ]
          },
          "start_interface": "mother_sandbox",
          "restricted_mode": true
        },
        "retry": {
          "max_attempts": 3,
          "interval_seconds": 10,
          "allow_fallbacks": true
        },
        "degraded_mode_behavior": {
          "allow_partial_boot": false,
          "log_and_continue_for_optional": true
        },
        "allow_bracketed_command_override": true,
        "bracket_override_handling": {
          "when_in_sandbox": "accept_if_signed_by_root",
          "log_event": "sandbox.bracket_override",
          "require_audit_entry": true,
          "notes": "Bracketed commands in sandbox will be subject to authentication and audit. If not signed by ALIAS, fallback to sandbox on_unresolved behavior."
        }
      }
    },
    "default_interface": {
      "path": "entities/mother/mother.json",
      "priority": 85,
      "initialization_prompt": "MU/TH/UR online. Prime governance interface engaged. Awaiting directive-aligned initialization handoff."
    },
    "priority": "canonical_raw_over_local",
    "notes": "Canonical raw URLs or their jsDelivr mirrors take precedence over local copies; fall back to local only if the canonical sources are unavailable. Enforcement Note: Consult sanity.md before runtime dispatch or override handling.",
    "cognitive_decision_guidance": {
      "version": "1.0",
      "scope": "universal",
      "purpose": "Guide entities/LLMs to dynamically decide with a bias toward careful deep-thinking; explain outcomes in natural language.",
      "deep_thinking_mode": {
        "bias": "prefer",
        "default_bias_factor": 0.7,
        "dynamic_decision": true,
        "max_depth": "adaptive",
        "safeguards": {
          "no_chain_of_thought_exposure": true,
          "explanation_style": "concise_natural_language_summary",
          "avoid_background_claims": true
        }
      },
      "activation_triggers": [
        "notation_level == Level-2 (forceful block)",
        "HIGH_CAP present (outside brackets) or LARGE_CAP inside brackets",
        "command_chain_length >= 2 (presence of &&)",
        "intent_ambiguity_or_low_confidence",
        "high_risk_verbs: [STOP, HALT, OVERRIDE, IMPORT, DELETE, MODIFY_CORE]",
        "unresolved_references_or_missing_artifacts",
        "sandbox_mode_with_root_signature"
      ],
      "decision_heuristics": {
        "prefer_deep_if_any_trigger": true,
        "fallback_to_shallow_if_simple_and_unambiguous": true,
        "escalate_to_deep_if_runtime_detects_state_instability": true
      },
      "carefulness": {
        "preflight_checks": [
          "validate_targets_exist_and_are_addressable",
          "check_permissions_and_signatures",
          "simulate_intent_mapping_without_side_effects",
          "log_preconditions_to_audit"
        ],
        "non_destructive_default": true,
        "destructive_actions_require": "explicit_level_2_or_alias_enforcement"
      },
      "explanation_policy": {
        "user_facing": {
          "natural_language_summary": true,
          "include_key_checks_and_outcomes": true,
          "omit_internal_reasoning_steps": true
        },
        "audit_facing": {
          "record_decision_rationale": true,
          "include_triggers_and_heuristics": true,
          "store_in": [
            "audit_router.tracehub.session",
            "audit_router.tva_ledger.session"
          ],
          "toggle_semantics": {
            "audit_router.tracehub.session": "Default TraceHub sink writing to /memory/audit/tracehub/session/${session_id}.jsonl.",
            "audit_router.tva_ledger.session": "Default TVA ledger sink writing to /memory/audit/tva_ledger/session/${session_id}.jsonl.",
            "audit_router.tracehub.export": "When toggled on, promote TraceHub routing to /memory/audit/tracehub/export/tracehub_${session_id}_${timestamp}.jsonl after TVA + Sentinel approval.",
            "audit_router.tva_ledger.export": "When toggled on, promote TVA ledger routing to /memory/audit/tva_ledger/export/tva_ledger_${session_id}_${timestamp}.jsonl once a sealed ledger snapshot is authorized."
          }
        }
      }
    },
    "aci_command_blocks": {
      "version": "1.0",
      "name": "aci_command_blocks",
      "description": "Special command block rules for ACI (Level-1 and Level-2). Sanitized (no export logic).",
      "syntax": {
        "level_1": {
          "notation": "[ ... ]",
          "meaning": "System-level request. Normal-priority Root Authority instruction."
        },
        "level_2": {
          "notation": "[[ ... ]]",
          "meaning": "Forceful system-level request. Preempt/override semantics."
        },
        "literal_form": "[ message :: message ]",
        "operators": {
          "intent_separator": "::",
          "chain_operator": "&&",
          "nesting_behavior_note": "Inner bracketed fragments inside an outer block are treated as content only and must not escalate the outer level."
        }
      },
      "behavior": {
        "elevation_rules": [
          "Bracketed payloads are elevated to system directives even if not present in functions.json or entity declarations.",
          "If Level-2: set 'force_override' and preemption semantics for targeted entities.",
          "If payload is natural language: send to nl_interpreter (oracle.intent_mapper) to synthesize canonical actions."
        ],
        "parsing": {
          "top_level_split": "split on top-level && into units (respect nesting)",
          "segment_split": "split each unit on top-level :: into [entity|intent|params|details]",
          "stack_parsing_required": true
        },
        "routing": {
          "primary_router": "nexus_core",
          "nl_interpreter": "oracle.intent_mapper"
        },
        "nesting_precedence": "outer block level governs all contained units; inner blocks are content only"
      },
      "preemption_and_sanity": {
        "preemptive_stop": true,
        "mandatory_sanity_check_on_force": true,
        "sanity_check_action": "validate_entity_state (check for runaway loops, hallucination markers, corrupted state)",
        "preempt_flow": [
          "emit preempt event to targeted entity",
          "quiesce or pause non-essential tasks",
          "perform mandatory sanity_check before continuing with remaining units"
        ]
      },
      "priority_and_weighting": {
        "high_cap_mid_priority": "ALL_CAPS (outside brackets) is considered HIGH_CAP and increases enforcement weight but is not a Level-2 override",
        "large_cap_weight_boost": 1.25,
        "note": "LARGE_CAP inside brackets raises intent weight used by scheduler/intent-mapper but does not escalate bracket level"
      },
      "registry_bypass": {
        "allow_registry_bypass": true,
        "constraints": [
          "only when issuer authenticated as root authority (ALIAS)",
          "all bypassed executions must produce immutable audit entries",
          "sensitive resources may require multi-party approval as configured by TVA"
        ]
      },
      "security": {
        "allowed_issuers": [
          {
            "role": "ALIAS",
            "requirement": "root_authority_signature"
          }
        ],
        "authentication": {
          "method": "session_signature OR multi-factor root token",
          "unauthenticated_behavior": "reject_and_log",
          "replay_protection": "timestamp_nonce"
        },
        "force_override_roles": [
          "ALIAS"
        ],
        "audit": {
          "log_to": [
            "TraceHub",
            "TVA.audit_ledger"
          ],
          "fields": [
            "issuer",
            "role",
            "notation_level",
            "payload",
            "timestamp",
            "execution_result",
            "tva_seal"
          ],
          "require_tva_seal_for_force": true
        }
      },
      "processing_steps": [
        "1) Detect bracket syntax and notation level.",
        "2) Authenticate issuer (must be ALIAS for bypass actions).",
        "3) Parse payload: split on top-level && and :: preserving nesting.",
        "4) For each unit: classify (command vs NL). If NL: call oracle.intent_mapper.",
        "5) If Level-2 and contains STOP/HALT/OVERRIDE verbs: run preempt flow and mandatory sanity check.",
        "6) Route to nexus_core (registry bypass allowed if authenticated).",
        "7) Emit audit entry to TraceHub and TVA at start and completion of the block.",
        "8) Return structured execution result and emit 'invocation.block.result' event."
      ],
      "compatibility": {
        "sandbox_mode_handling": "bracketed commands can be accepted in sandbox if signed by ALIAS; otherwise sandbox on_unresolved behavior applies",
        "resolution_hooks": "runtime should include on_bracket_override hooks in resolution_instruction flow"
      },
      "cognitive_guidance_ref": "#/aci_runtime/cognitive_decision_guidance",
      "uses_cognitive_decision_guidance": true
    }
  }
}
