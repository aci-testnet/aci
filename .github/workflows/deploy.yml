name: Deploy Worker + ensure Secrets Store secrets

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      STORE_ID: ${{ secrets.SECRETS_STORE_ID }}    # read from repo secret now
      HMAC_KEY_VALUE: ${{ secrets.HMAC_KEY_VALUE }}
      ADMIN_KEY_VALUE: ${{ secrets.ADMIN_KEY_VALUE }}
      ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID || '' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Wrangler
        run: npm install -g wrangler@latest

      - name: Create hmac-key (wrangler)
        run: |
          set -e
          if [ -z "${{ env.STORE_ID }}" ]; then
            echo "STORE_ID empty; skipping"
            exit 0
          fi
          npx wrangler secrets-store secret create "${{ env.STORE_ID }}" --name hmac-key --scopes workers --value "${{ env.HMAC_KEY_VALUE }}" --remote || echo "maybe exists, continuing"

      - name: Create admin-key (wrangler)
        run: |
          set -e
          npx wrangler secrets-store secret create "${{ env.STORE_ID }}" --name admin-key --scopes workers --value "${{ env.ADMIN_KEY_VALUE }}" --remote || echo "maybe exists, continuing"

      - name: Fallback upsert via Cloudflare API (idempotent)
        if: always()
        run: |
          set -e
          if [ -z "${{ env.STORE_ID }}" ] || [ -z "${{ env.CF_API_TOKEN }}" ]; then
            echo "Missing STORE_ID or CF_API_TOKEN â€” skipping fallback"
            exit 0
          fi
          sudo apt-get update -y && sudo apt-get install -y jq
          create_or_replace_secret() {
            name="$1"; value="$2"
            body=$(jq -nc --arg n "$name" --arg v "$value" '[{name:$n, value:$v, scopes:["workers"], comment:"created by github action"}]')
            http_status=$(curl -s -o /tmp/resp.json -w "%{http_code}" \
              -X POST "https://api.cloudflare.com/client/v4/accounts/${ACCOUNT_ID}/secrets_store/stores/${STORE_ID}/secrets" \
              -H "Authorization: Bearer ${CF_API_TOKEN}" \
              -H "Content-Type: application/json" \
              --data "$body" || true)
            if [ "$http_status" = "200" ] || [ "$http_status" = "201" ]; then
              echo "Created $name"
              return 0
            fi
            resp=$(curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${ACCOUNT_ID}/secrets_store/stores/${STORE_ID}/secrets" -H "Authorization: Bearer ${CF_API_TOKEN}")
            secret_id=$(echo "$resp" | jq -r --arg NAME "$name" '.result[] | select(.name == $NAME) | .id' | head -n1)
            if [ -z "$secret_id" ] || [ "$secret_id" = "null" ]; then
              echo "Could not find existing secret id for $name; API response:"
              echo "$resp"
              return 1
            fi
            curl -s -X DELETE "https://api.cloudflare.com/client/v4/accounts/${ACCOUNT_ID}/secrets_store/stores/${STORE_ID}/secrets/${secret_id}" -H "Authorization: Bearer ${CF_API_TOKEN}" || true
            http_status2=$(curl -s -o /tmp/resp2.json -w "%{http_code}" \
              -X POST "https://api.cloudflare.com/client/v4/accounts/${ACCOUNT_ID}/secrets_store/stores/${STORE_ID}/secrets" \
              -H "Authorization: Bearer ${CF_API_TOKEN}" \
              -H "Content-Type: application/json" \
              --data "$body" || true)
            if [ "$http_status2" = "200" ] || [ "$http_status2" = "201" ]; then
              echo "Recreated $name"
              return 0
            fi
            echo "Failed to recreate $name"; cat /tmp/resp2.json || true
            return 1
          }
          create_or_replace_secret "hmac-key" "${HMAC_KEY_VALUE}" || true
          create_or_replace_secret "admin-key" "${ADMIN_KEY_VALUE}" || true

 # debug-and-publish.yml (snippet to replace Publish Worker step)
- name: Debug: whoami & wrangler info
  run: |
    set -eux
    echo "PATH: $PATH"
    node --version
    npm --version
    npx --version || true
    # show wrangler if globally installed
    if command -v wrangler >/dev/null 2>&1; then
      echo "wrangler at $(command -v wrangler)"
      wrangler --version || true
    else
      echo "wrangler not installed globally"
    fi
    # Use npx to print a whoami with the token (non-interactive)
    if [ -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
      echo "CLOUDFLARE_API_TOKEN secret is empty or not set in repo secrets!"
    else
      echo "Attempting: npx --yes wrangler@latest whoami --apiToken *** (masked)"
      npx --yes wrangler@latest whoami --apiToken "${{ secrets.CLOUDFLARE_API_TOKEN }}" || echo "whoami failed (will still attempt publish)"
    fi

- name: Publish Worker (robust, verbose)
  env:
    CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  run: |
    set -euxo pipefail
    echo "Working directory: $(pwd)"
    # show the file to help debug missing config
    if [ -f wrangler.toml ]; then
      echo "wrangler.toml exists in repo root"
      sed -n '1,120p' wrangler.toml || true
    else
      echo "No wrangler.toml at repo root; ensure workingDirectory is set in the action"
    fi

    # Try global wrangler first (if installed)
    if command -v wrangler >/dev/null 2>&1; then
      echo "Publishing using global wrangler (verbose):"
      wrangler publish --verbose || echo "global wrangler publish failed (will fallback to npx)"
    fi

    # Fallback: use npx with explicit apiToken (avoids relying on env binding)
    echo "Publishing using npx wrangler@latest with explicit --apiToken (will show errors)"
    npx --yes wrangler@latest publish --apiToken "${CF_API_TOKEN}" --verbose 2>&1 | tee /tmp/wrangler_publish.log || true

    echo "-------- wrangler publish output (last 200 lines) --------"
    tail -n 200 /tmp/wrangler_publish.log | sed -n '1,200p'
    # fail the job if publish failed explicitly (set non-zero if no success code present)
    if ! grep -qE "Published|uploaded|Successfully published" /tmp/wrangler_publish.log; then
      echo "Publish step did not report success. See log above."
      exit 1
    fi
