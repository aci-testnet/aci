name: Deploy Worker

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    # Provide non-secret config here or move them to repository Variables
    env:
      ORG: aliasnet
      REPO: aci
      BRANCH: main
      PUBLIC: "false"            # set "true" briefly to bypass gates
      UA_ALLOW: "ChatGPT,GPTBot,OpenAI"
      ASN_ALLOW: ""              # comma-separated ASNs or empty

      # Required: GitHub repository secrets (Settings → Secrets and variables → Actions → New repository secret)
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      HMAC_KEY_VALUE: ${{ secrets.HMAC_KEY_VALUE }}
      ADMIN_KEY_VALUE: ${{ secrets.ADMIN_KEY_VALUE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Wrangler fresh
        run: |
          npm --version
          npm install --no-audit --no-fund --save-dev wrangler@latest
          npx wrangler --version

      - name: Verify required secrets are present (masked)
        run: |
          test -n "${CLOUDFLARE_API_TOKEN}" || (echo "Missing CLOUDFLARE_API_TOKEN" && exit 1)
          test -n "${CLOUDFLARE_ACCOUNT_ID}" || (echo "Missing CLOUDFLARE_ACCOUNT_ID" && exit 1)
          test -n "${HMAC_KEY_VALUE}" || (echo "Missing HMAC_KEY_VALUE" && exit 1)
          test -n "${ADMIN_KEY_VALUE}" || (echo "Missing ADMIN_KEY_VALUE" && exit 1)
          echo "Secrets present: OK"

      # Optional build (skips if no build script)
      - name: Build (if package.json has build script)
        run: |
          if [ -f package.json ] && jq -e '.scripts.build' package.json >/dev/null 2>&1; then
            npm run build
          else
            echo "No build script; skipping"
          fi

      # Put Worker secrets (non-interactive via stdin). Names must match your Worker code: SECRET and ADMIN_KEY.
      - name: Put Worker secrets
        env:
          CF_VARS: |
            SECRET<<__EOF__
            ${HMAC_KEY_VALUE}
            __EOF__
            ADMIN_KEY<<__EOF__
            ${ADMIN_KEY_VALUE}
            __EOF__
        run: |
          set -euo pipefail
          echo "Setting SECRET"
          printf "%s" "${HMAC_KEY_VALUE}" | npx wrangler secret put SECRET --yes
          echo "Setting ADMIN_KEY"
          printf "%s" "${ADMIN_KEY_VALUE}" | npx wrangler secret put ADMIN_KEY --yes

      - name: Publish Worker (with vars)
        env:
          # Wrangler needs these two in env for auth
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          set -euo pipefail
          echo "whoami:"
          npx wrangler whoami || true
          echo "Deploying with vars…"
          npx wrangler deploy \
            --log-level=debug \
            --var ORG="${ORG}" \
            --var REPO="${REPO}" \
            --var BRANCH="${BRANCH}" \
            --var PUBLIC="${PUBLIC}" \
            --var UA_ALLOW="${UA_ALLOW}" \
            --var ASN_ALLOW="${ASN_ALLOW}"
