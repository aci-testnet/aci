name: Deploy Worker + ensure Secrets Store secrets

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      STORE_ID: ${{ secrets.SECRETS_STORE_ID }}
      HMAC_KEY_VALUE: ${{ secrets.HMAC_KEY_VALUE }}
      ADMIN_KEY_VALUE: ${{ secrets.ADMIN_KEY_VALUE }}
      ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # Install wrangler as a repo devDependency for deterministic CI
      - name: Install dependencies (ci)
        run: |
          if [ ! -f package.json ]; then
            npm init -y
          fi
          npm install --save-dev wrangler@latest
          npm ci

      - name: Verify wrangler & env
        run: |
          set -eux
          node --version
          npm --version
          ./node_modules/.bin/wrangler --version
          echo "STORE_ID present: ${STORE_ID:+yes}"
          echo "CF_API_TOKEN present: ${CF_API_TOKEN:+yes}"
          echo "HMAC_KEY_VALUE present: ${HMAC_KEY_VALUE:+yes}"
          echo "ADMIN_KEY_VALUE present: ${ADMIN_KEY_VALUE:+yes}"

      # Create/update secrets via repo-local wrangler (non-fatal if already exists)
      - name: Create hmac-key (wrangler)
        run: |
          set -eux
          if [ -z "${STORE_ID}" ]; then
            echo "STORE_ID empty; skipping creation"
            exit 0
          fi
          ./node_modules/.bin/wrangler secrets-store secret create "${STORE_ID}" \
            --name hmac-key --scopes workers --value "${HMAC_KEY_VALUE}" --remote || echo "maybe exists, continuing"

      - name: Create admin-key (wrangler)
        run: |
          set -eux
          ./node_modules/.bin/wrangler secrets-store secret create "${STORE_ID}" \
            --name admin-key --scopes workers --value "${ADMIN_KEY_VALUE}" --remote || echo "maybe exists, continuing"

      # Idempotent API fallback (create-or-replace) in case CLI create failed
      - name: Fallback upsert via Cloudflare API (idempotent)
        if: always()
        run: |
          set -eux
          if [ -z "${STORE_ID}" ] || [ -z "${CF_API_TOKEN}" ] || [ -]()_]()
